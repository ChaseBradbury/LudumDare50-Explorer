//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Inputs/Movement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Movement"",
    ""maps"": [
        {
            ""name"": ""Click"",
            ""id"": ""94e97e7d-299a-492c-8f88-bbb2f59e621a"",
            ""actions"": [
                {
                    ""name"": ""PrimaryClick"",
                    ""type"": ""Button"",
                    ""id"": ""622526f6-31b0-466d-8294-d339134f75cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryClick"",
                    ""type"": ""Button"",
                    ""id"": ""daf3e450-e31e-403f-be67-bb9cb8a3a41b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""e84433bb-67a2-4df6-ab0c-0a8e594d3337"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""367a673f-a4eb-44a3-9d6e-a449fa036042"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94224974-a679-4fea-804e-c542b898fb9f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b740171c-fd04-49ac-99af-f57574a728be"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keys"",
            ""id"": ""b06e9f2f-4a3e-4d6f-bf71-5ebac353e660"",
            ""actions"": [
                {
                    ""name"": ""North"",
                    ""type"": ""Button"",
                    ""id"": ""97ab7eab-0018-4ad2-857a-fad6661444f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Northeast"",
                    ""type"": ""Button"",
                    ""id"": ""9ed39c74-5e23-4927-a512-0e73d4c904ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""East"",
                    ""type"": ""Button"",
                    ""id"": ""09870be9-4766-4783-a177-fed2a9f6592f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Southeast"",
                    ""type"": ""Button"",
                    ""id"": ""6e300b80-4266-4b5e-9899-b7a6964cd7aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""South"",
                    ""type"": ""Button"",
                    ""id"": ""cdeb18e3-4ed1-437a-8852-deccb9daf649"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Southwest"",
                    ""type"": ""Button"",
                    ""id"": ""62121576-4797-4b00-8f3b-126782dcaa23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""West"",
                    ""type"": ""Button"",
                    ""id"": ""3f690d7e-5cfc-4022-868a-70696f462d06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Northwest"",
                    ""type"": ""Button"",
                    ""id"": ""a5fbd777-10bc-4eb4-a2e2-14fd717889f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Center"",
                    ""type"": ""Button"",
                    ""id"": ""12777954-57ac-4ef1-8d54-2aeff7da6a41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be57775f-64a4-4ec3-82e5-c4985220e090"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""East"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96c7345a-3fd3-4d89-9fa6-414be6f354f8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""North"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae413184-598a-40f5-94c2-4030c1e23702"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Northeast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dde49218-5a55-42c8-817f-a8a27dce2a61"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Southeast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a1b9073-765f-410d-b333-b21947db1a48"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""South"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e37ba14c-bc0b-40fe-8654-b9f05a2baa70"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Southwest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe529d08-1135-4824-a0e9-de4d39e78a50"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""West"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""325d0128-3da5-4a85-88b4-6040c2348f6c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Northwest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dde7965-c39e-4d84-8d82-c332dbb63c64"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Click
        m_Click = asset.FindActionMap("Click", throwIfNotFound: true);
        m_Click_PrimaryClick = m_Click.FindAction("PrimaryClick", throwIfNotFound: true);
        m_Click_SecondaryClick = m_Click.FindAction("SecondaryClick", throwIfNotFound: true);
        m_Click_Position = m_Click.FindAction("Position", throwIfNotFound: true);
        // Keys
        m_Keys = asset.FindActionMap("Keys", throwIfNotFound: true);
        m_Keys_North = m_Keys.FindAction("North", throwIfNotFound: true);
        m_Keys_Northeast = m_Keys.FindAction("Northeast", throwIfNotFound: true);
        m_Keys_East = m_Keys.FindAction("East", throwIfNotFound: true);
        m_Keys_Southeast = m_Keys.FindAction("Southeast", throwIfNotFound: true);
        m_Keys_South = m_Keys.FindAction("South", throwIfNotFound: true);
        m_Keys_Southwest = m_Keys.FindAction("Southwest", throwIfNotFound: true);
        m_Keys_West = m_Keys.FindAction("West", throwIfNotFound: true);
        m_Keys_Northwest = m_Keys.FindAction("Northwest", throwIfNotFound: true);
        m_Keys_Center = m_Keys.FindAction("Center", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Click
    private readonly InputActionMap m_Click;
    private IClickActions m_ClickActionsCallbackInterface;
    private readonly InputAction m_Click_PrimaryClick;
    private readonly InputAction m_Click_SecondaryClick;
    private readonly InputAction m_Click_Position;
    public struct ClickActions
    {
        private @MovementInput m_Wrapper;
        public ClickActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryClick => m_Wrapper.m_Click_PrimaryClick;
        public InputAction @SecondaryClick => m_Wrapper.m_Click_SecondaryClick;
        public InputAction @Position => m_Wrapper.m_Click_Position;
        public InputActionMap Get() { return m_Wrapper.m_Click; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClickActions set) { return set.Get(); }
        public void SetCallbacks(IClickActions instance)
        {
            if (m_Wrapper.m_ClickActionsCallbackInterface != null)
            {
                @PrimaryClick.started -= m_Wrapper.m_ClickActionsCallbackInterface.OnPrimaryClick;
                @PrimaryClick.performed -= m_Wrapper.m_ClickActionsCallbackInterface.OnPrimaryClick;
                @PrimaryClick.canceled -= m_Wrapper.m_ClickActionsCallbackInterface.OnPrimaryClick;
                @SecondaryClick.started -= m_Wrapper.m_ClickActionsCallbackInterface.OnSecondaryClick;
                @SecondaryClick.performed -= m_Wrapper.m_ClickActionsCallbackInterface.OnSecondaryClick;
                @SecondaryClick.canceled -= m_Wrapper.m_ClickActionsCallbackInterface.OnSecondaryClick;
                @Position.started -= m_Wrapper.m_ClickActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_ClickActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_ClickActionsCallbackInterface.OnPosition;
            }
            m_Wrapper.m_ClickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryClick.started += instance.OnPrimaryClick;
                @PrimaryClick.performed += instance.OnPrimaryClick;
                @PrimaryClick.canceled += instance.OnPrimaryClick;
                @SecondaryClick.started += instance.OnSecondaryClick;
                @SecondaryClick.performed += instance.OnSecondaryClick;
                @SecondaryClick.canceled += instance.OnSecondaryClick;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }
        }
    }
    public ClickActions @Click => new ClickActions(this);

    // Keys
    private readonly InputActionMap m_Keys;
    private IKeysActions m_KeysActionsCallbackInterface;
    private readonly InputAction m_Keys_North;
    private readonly InputAction m_Keys_Northeast;
    private readonly InputAction m_Keys_East;
    private readonly InputAction m_Keys_Southeast;
    private readonly InputAction m_Keys_South;
    private readonly InputAction m_Keys_Southwest;
    private readonly InputAction m_Keys_West;
    private readonly InputAction m_Keys_Northwest;
    private readonly InputAction m_Keys_Center;
    public struct KeysActions
    {
        private @MovementInput m_Wrapper;
        public KeysActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @North => m_Wrapper.m_Keys_North;
        public InputAction @Northeast => m_Wrapper.m_Keys_Northeast;
        public InputAction @East => m_Wrapper.m_Keys_East;
        public InputAction @Southeast => m_Wrapper.m_Keys_Southeast;
        public InputAction @South => m_Wrapper.m_Keys_South;
        public InputAction @Southwest => m_Wrapper.m_Keys_Southwest;
        public InputAction @West => m_Wrapper.m_Keys_West;
        public InputAction @Northwest => m_Wrapper.m_Keys_Northwest;
        public InputAction @Center => m_Wrapper.m_Keys_Center;
        public InputActionMap Get() { return m_Wrapper.m_Keys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeysActions set) { return set.Get(); }
        public void SetCallbacks(IKeysActions instance)
        {
            if (m_Wrapper.m_KeysActionsCallbackInterface != null)
            {
                @North.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnNorth;
                @North.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnNorth;
                @North.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnNorth;
                @Northeast.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnNortheast;
                @Northeast.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnNortheast;
                @Northeast.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnNortheast;
                @East.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnEast;
                @East.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnEast;
                @East.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnEast;
                @Southeast.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnSoutheast;
                @Southeast.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnSoutheast;
                @Southeast.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnSoutheast;
                @South.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnSouth;
                @South.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnSouth;
                @South.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnSouth;
                @Southwest.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnSouthwest;
                @Southwest.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnSouthwest;
                @Southwest.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnSouthwest;
                @West.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnWest;
                @West.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnWest;
                @West.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnWest;
                @Northwest.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnNorthwest;
                @Northwest.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnNorthwest;
                @Northwest.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnNorthwest;
                @Center.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnCenter;
                @Center.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnCenter;
                @Center.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnCenter;
            }
            m_Wrapper.m_KeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @North.started += instance.OnNorth;
                @North.performed += instance.OnNorth;
                @North.canceled += instance.OnNorth;
                @Northeast.started += instance.OnNortheast;
                @Northeast.performed += instance.OnNortheast;
                @Northeast.canceled += instance.OnNortheast;
                @East.started += instance.OnEast;
                @East.performed += instance.OnEast;
                @East.canceled += instance.OnEast;
                @Southeast.started += instance.OnSoutheast;
                @Southeast.performed += instance.OnSoutheast;
                @Southeast.canceled += instance.OnSoutheast;
                @South.started += instance.OnSouth;
                @South.performed += instance.OnSouth;
                @South.canceled += instance.OnSouth;
                @Southwest.started += instance.OnSouthwest;
                @Southwest.performed += instance.OnSouthwest;
                @Southwest.canceled += instance.OnSouthwest;
                @West.started += instance.OnWest;
                @West.performed += instance.OnWest;
                @West.canceled += instance.OnWest;
                @Northwest.started += instance.OnNorthwest;
                @Northwest.performed += instance.OnNorthwest;
                @Northwest.canceled += instance.OnNorthwest;
                @Center.started += instance.OnCenter;
                @Center.performed += instance.OnCenter;
                @Center.canceled += instance.OnCenter;
            }
        }
    }
    public KeysActions @Keys => new KeysActions(this);
    public interface IClickActions
    {
        void OnPrimaryClick(InputAction.CallbackContext context);
        void OnSecondaryClick(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
    public interface IKeysActions
    {
        void OnNorth(InputAction.CallbackContext context);
        void OnNortheast(InputAction.CallbackContext context);
        void OnEast(InputAction.CallbackContext context);
        void OnSoutheast(InputAction.CallbackContext context);
        void OnSouth(InputAction.CallbackContext context);
        void OnSouthwest(InputAction.CallbackContext context);
        void OnWest(InputAction.CallbackContext context);
        void OnNorthwest(InputAction.CallbackContext context);
        void OnCenter(InputAction.CallbackContext context);
    }
}
